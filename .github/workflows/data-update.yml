name: 📺 Update Live Channels Data

on:
  schedule:
    # Run daily at 6 AM UTC (optimal for global content refresh)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  update-live-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 📦 Install minimal dependencies for data update
        run: npm install node-fetch@2.7.0 --no-audit
        
      - name: 🔑 Verify YouTube API access
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          if [ -z "$YOUTUBE_API_KEY" ]; then
            echo "❌ ERROR: YOUTUBE_API_KEY secret not configured!"
            echo "Please add your YouTube Data API v3 key to repository secrets."
            exit 1
          else
            echo "✅ YouTube API key configured (${#YOUTUBE_API_KEY} characters)"
          fi
          
      - name: 📺 Update live channels data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          echo "🚀 Starting live channels data update..."
          node scripts/update_popular_live.js
          echo "✅ Data update completed"
          
      - name: 📊 Check for data changes
        id: changes
        run: |
          if git diff --quiet public/popular_live.json; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No changes detected in popular_live.json"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📈 Changes detected in popular_live.json:"
            git diff --stat public/popular_live.json
          fi
          
      - name: 💾 Commit updated data
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public/popular_live.json
          
          # Create descriptive commit message with timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          git commit -m "📺 Update live channels data - $TIMESTAMP
          
          - Refreshed live streaming channels across all regions
          - Applied geographic filtering and quota protection
          - Updated by automated workflow"
          
          echo "📤 Pushing updated data to repository..."
          git push
          echo "✅ Data committed and pushed successfully"
          
      - name: 🚀 Deploy updated data to production
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Triggering production deployment with updated data..."
          gh workflow run "🚢 Deploy to Production" \
            --field confirm_production="DEPLOY" \
            --field include_latest_data="true"
          echo "✅ Production deployment triggered"
          
      - name: 📋 Generate summary
        run: |
          echo "## 📺 Live Channels Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ] || [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            echo "**Status:** ✅ Data updated and committed" >> $GITHUB_STEP_SUMMARY
            echo "**Production Deploy:** ✅ Triggered automatically" >> $GITHUB_STEP_SUMMARY
            echo "**Next Update:** Live at myteslalink.github.io in ~3-5 minutes" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ℹ️ No changes detected, data unchanged" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Data Update Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Geographic Filtering:** Applied to prevent content mismatches" >> $GITHUB_STEP_SUMMARY
          echo "- **Quota Protection:** Monitored to stay within API limits" >> $GITHUB_STEP_SUMMARY
          echo "- **Fallback System:** Preserves existing data on API failures" >> $GITHUB_STEP_SUMMARY